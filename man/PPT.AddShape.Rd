% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shapes.R
\name{PPT.AddShape}
\alias{PPT.AddShape}
\title{Add various shapes}
\usage{
PPT.AddShape(
  ppt,
  shape.type = 1,
  top = 0.05,
  left = 0.05,
  width = 0.9,
  height = 0.9,
  fill.color = "grey",
  fill.transparency = 0,
  line.color = "black",
  line.type = 1,
  line.size = 1,
  maxscale = 1,
  newslide = FALSE
)
}
\arguments{
\item{ppt}{The ppt object as used in \pkg{R2PPT}.}

\item{shape.type}{The shape to add. The possible types are documented in the
\code{MsoAutoShapeType} enumeration in Microsoft's MSDN docu (e.g.
rectangle = 1, rounded rectangle = 5, left arrow = 34).}

\item{top, left}{Vertical and horizontal placement of the shape. Either as
fraction of slides dimensions or as pixel value. Values bigger than
\code{maxscale} are interpreted as pixels.#'}

\item{width, height}{Dimensions of shape. For values smaller than
\code{maxscale} (default is \code{1}) this refers to a proportion of the
current slide's width or height. Values bigger than \code{maxscale} are
interpreted as pixels.}

\item{fill.color}{Background color either as hex value or R color name.}

\item{fill.transparency}{Transparency of filling (\code{[0,1]}, default is
\code{0} = opaque.).}

\item{line.color}{Color of text either as hex value or color name.}

\item{line.type}{\code{1} = solid (default), \code{2-8}= dots, dashes and
mixtures. See MsoLineDashStyle Enumeration for details.}

\item{line.size}{Thickness of line (default\code{1}).}

\item{maxscale}{Threshold below which values are interpreted as proportional
scaling factors for the \code{width} and \code{height} argument. Above the
threshold values are interpreted as pixels.}

\item{newslide}{Logical (default is \code{TRUE}) Whether the graphic will be
placed on a new slide.}
}
\description{
Add various shapes to a slide. YOu can position it and modify a limited number
of aspects of its appearance (color etc.). However, not all the parameters for
all shapes can be implemented.
}
\examples{
\dontrun{

# open new PPT presentation
p <- PPT.Init(visible=T, method = "RDCOMClient")  


## EXAMPLE 1 ##

# Look up the shape type number in the "MsoAutoShapeType enumeration". 
# It is one integer, e.g. rectangle = 1, just google it.

p <- PPT.AddBlankSlide(p)
# add a rectangle
p <- PPT.AddShape(p, shape.type= 1, height=.4, width =.4, left=.05, top=.05)
# add a rounded rectangle
p <- PPT.AddShape(p, shape.type= 5, height=.4, width =.4, left=.05, top=.55)
# add a triangle 
p <- PPT.AddShape(p, shape.type= 7, height=.4, width =.4, left=.55, top=.05)
# add a smiley
p <- PPT.AddShape(p, shape.type= 17, height=.4, width =.4, left=.55, top=.55)



## EXAMPLE 2 ##

# add many type of shapes on one slide in two loops to get an 
# overview what shapes exist. The fill and line parameters are 
# randomly modified to get a variety of shapes.
p <- PPT.AddBlankSlide(p)
cols <- colors()   # all named R colors
i <- 0             # counter
set.seed(0)        # make sampling redproducible

# loop over left and top to alter position of shape
for ( left in seq(.05, .85, by=.1) ) {
  for ( top in seq(.05, .85, by=.1) ) {
    i <- i + 1
    p <- PPT.AddShape(p, 
                      shape.type= i,                               # go though shapes one by one 1,2,....
                      height=.08, width =.08,                      # height and width of shape
                      left=left, top=top,                          # shape position is modified in each loop 
                      fill.transparency = sample(c(0,.3, .7), 1),  # use different transparencies
                      fill.color = cols[i],                        # go through all colors for filling
                      line.color = sample(cols, 1),                # random line color
                      line.size = sample(1:30/10, 1),              # random line size
                      line.type = sample(1:8, 1)                   # random line type
                      )
  }
}


}

}
\author{
Mark Heckmann
}
